When would you want to use a remote repository rather than keeping all your work
local?

    A remote repository is useful when you want to share your work with someone else i.e. when you want to make it public.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You may be working on a feature and pulling changes manually allows you to control when to bring in changes that might potentially conflict with the files you were working on.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    You fork a repository when you want to take somebody's project and then modify it to suit your own needs. If the author accepts, you can even push your changes to his repository, but this is not necessary. You can always continue using your own version of the project.

    You clone a repository when you want a local copy of a project hosted on GitHub. Ideally, you should be cloning a repo that you have edit permissions on, otherwise you can't push your changes to it.

    A fork is nothing but a clone done for you by the server on the server itself.

    You create a branch when you want to work on a new feature without affecting the main project.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It helps you to compare changes and resolve conflicts offline. Once the changes are combined, you can push your changes to the remote server (GitHub), at which point the local copy of the remote is also updated.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would have to send a copy of my changes to someone else for review, by email or a shared folder, most likely I would have to zip it up. Then that person would have to compare my changes with the main copy. If our main copies aren't in sync, that would be a problem. Collaboration would probably be easier if that person were around and I could call him to my desk to see my changes. But that's only wishful thinking!

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    The master branch is meant to be always working and if I'm working on an experimental feature, I would want to create a branch for it rather than checking it in into master. Also, I may want to have my changes reviewed by someone else before merging it into master. Although this workflow is typically longer and more time consuming, it helps keep the master branch in sanity.
